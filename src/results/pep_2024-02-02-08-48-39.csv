"status","pep number","PEP Title","authors","Python version"
"PA","https://peps.python.org/pep-0001/","PEP 1 – PEP Purpose and Guidelines","Barry Warsaw, Jeremy Hylton, David Goodger, Alyssa Coghlan",""
"PA","https://peps.python.org/pep-0002/","PEP 2 – Procedure for Adding New Modules","Brett Cannon, Martijn Faassen",""
"PW","https://peps.python.org/pep-0003/","PEP 3 – Guidelines for Handling Bug Reports","Jeremy Hylton",""
"PA","https://peps.python.org/pep-0004/","PEP 4 – Deprecation of Standard Modules","Brett Cannon, Martin von Löwis",""
"PS","https://peps.python.org/pep-0005/","PEP 5 – Guidelines for Language Evolution","Paul Prescod",""
"PS","https://peps.python.org/pep-0006/","PEP 6 – Bug Fix Releases","Aahz, Anthony Baxter",""
"PA","https://peps.python.org/pep-0007/","PEP 7 – Style Guide for C Code","Guido van Rossum, Barry Warsaw",""
"PA","https://peps.python.org/pep-0008/","PEP 8 – Style Guide for Python Code","Guido van Rossum, Barry Warsaw, Alyssa Coghlan",""
"PW","https://peps.python.org/pep-0009/","PEP 9 – Sample Plaintext PEP Template","Barry Warsaw",""
"PA","https://peps.python.org/pep-0010/","PEP 10 – Voting Guidelines","Barry Warsaw",""
"PA","https://peps.python.org/pep-0011/","PEP 11 – CPython platform support","Martin von Löwis, Brett Cannon",""
"PA","https://peps.python.org/pep-0012/","PEP 12 – Sample reStructuredText PEP Template","David Goodger, Barry Warsaw, Brett Cannon",""
"PA","https://peps.python.org/pep-0013/","PEP 13 – Python Language Governance","The Python core team and community",""
"IA","https://peps.python.org/pep-0020/","PEP 20 – The Zen of Python","Tim Peters",""
"PW","https://peps.python.org/pep-0042/","PEP 42 – Feature Requests","Jeremy Hylton",""
"SF","https://peps.python.org/pep-0100/","PEP 100 – Python Unicode Integration","Marc-André Lemburg","2.0"
"IA","https://peps.python.org/pep-0101/","PEP 101 – Doing Python Releases 101","Barry Warsaw, Guido van Rossum",""
"IS","https://peps.python.org/pep-0102/","PEP 102 – Doing Python Micro Releases","Anthony Baxter, Barry Warsaw, Guido van Rossum",""
"IW","https://peps.python.org/pep-0103/","PEP 103 – Collecting information about git","Oleg Broytman",""
"IF","https://peps.python.org/pep-0160/","PEP 160 – Python 1.6 Release Schedule","Fred L. Drake, Jr.","1.6"
"IF","https://peps.python.org/pep-0200/","PEP 200 – Python 2.0 Release Schedule","Jeremy Hylton","2.0"
"SF","https://peps.python.org/pep-0201/","PEP 201 – Lockstep Iteration","Barry Warsaw","2.0"
"SF","https://peps.python.org/pep-0202/","PEP 202 – List Comprehensions","Barry Warsaw","2.0"
"SF","https://peps.python.org/pep-0203/","PEP 203 – Augmented Assignments","Thomas Wouters","2.0"
"SR","https://peps.python.org/pep-0204/","PEP 204 – Range Literals","Thomas Wouters","2.0"
"SF","https://peps.python.org/pep-0205/","PEP 205 – Weak References","Fred L. Drake, Jr.","2.1"
"IW","https://peps.python.org/pep-0206/","PEP 206 – Python Advanced Library","A.M. Kuchling",""
"SF","https://peps.python.org/pep-0207/","PEP 207 – Rich Comparisons","Guido van Rossum, David Ascher","2.1"
"SF","https://peps.python.org/pep-0208/","PEP 208 – Reworking the Coercion Model","Neil Schemenauer, Marc-André Lemburg","2.1"
"SW","https://peps.python.org/pep-0209/","PEP 209 – Multi-dimensional Arrays","Paul Barrett, Travis Oliphant","2.2"
"SR","https://peps.python.org/pep-0210/","PEP 210 – Decoupling the Interpreter Loop","David Ascher","2.1"
"SR","https://peps.python.org/pep-0211/","PEP 211 – Adding A New Outer Product Operator","Greg Wilson","2.1"
"SR","https://peps.python.org/pep-0212/","PEP 212 – Loop Counter Iteration","Peter Schneider-Kamp","2.1"
"SD","https://peps.python.org/pep-0213/","PEP 213 – Attribute Access Handlers","Paul Prescod","2.1"
"SF","https://peps.python.org/pep-0214/","PEP 214 – Extended Print Statement","Barry Warsaw","2.0"
"SS","https://peps.python.org/pep-0215/","PEP 215 – String Interpolation","Ka-Ping Yee","2.1"
"IR","https://peps.python.org/pep-0216/","PEP 216 – Docstring Format","Moshe Zadka",""
"SF","https://peps.python.org/pep-0217/","PEP 217 – Display Hook for Interactive Use","Moshe Zadka","2.1"
"SF","https://peps.python.org/pep-0218/","PEP 218 – Adding a Built-In Set Object Type","Greg Wilson, Raymond Hettinger","2.2"
"SD","https://peps.python.org/pep-0219/","PEP 219 – Stackless Python","Gordon McMillan","2.1"
"IR","https://peps.python.org/pep-0220/","PEP 220 – Coroutines, Generators, Continuations","Gordon McMillan",""
"SF","https://peps.python.org/pep-0221/","PEP 221 – Import As","Thomas Wouters","2.0"
"SD","https://peps.python.org/pep-0222/","PEP 222 – Web Library Enhancements","A.M. Kuchling","2.1"
"SF","https://peps.python.org/pep-0223/","PEP 223 – Change the Meaning of \x Escapes","Tim Peters","2.0"
"SR","https://peps.python.org/pep-0224/","PEP 224 – Attribute Docstrings","Marc-André Lemburg","2.1"
"SR","https://peps.python.org/pep-0225/","PEP 225 – Elementwise/Objectwise Operators","Huaiyu Zhu, Gregory Lielens","2.1"
"IF","https://peps.python.org/pep-0226/","PEP 226 – Python 2.1 Release Schedule","Jeremy Hylton","2.1"
"SF","https://peps.python.org/pep-0227/","PEP 227 – Statically Nested Scopes","Jeremy Hylton","2.1"
"SW","https://peps.python.org/pep-0228/","PEP 228 – Reworking Python’s Numeric Model","Moshe Zadka, Guido van Rossum",""
"SF","https://peps.python.org/pep-0229/","PEP 229 – Using Distutils to Build Python","A.M. Kuchling","2.1"
"SF","https://peps.python.org/pep-0230/","PEP 230 – Warning Framework","Guido van Rossum","2.1"
"SR","https://peps.python.org/pep-0231/","PEP 231 – __findattr__()","Barry Warsaw","2.1"
"SF","https://peps.python.org/pep-0232/","PEP 232 – Function Attributes","Barry Warsaw","2.1"
"SD","https://peps.python.org/pep-0233/","PEP 233 – Python Online Help","Paul Prescod","2.1"
"SF","https://peps.python.org/pep-0234/","PEP 234 – Iterators","Ka-Ping Yee, Guido van Rossum","2.1"
"SF","https://peps.python.org/pep-0235/","PEP 235 – Import on Case-Insensitive Platforms","Tim Peters","2.1"
"SF","https://peps.python.org/pep-0236/","PEP 236 – Back to the __future__","Tim Peters","2.1"
"SF","https://peps.python.org/pep-0237/","PEP 237 – Unifying Long Integers and Integers","Moshe Zadka, Guido van Rossum","2.2"
"SF","https://peps.python.org/pep-0238/","PEP 238 – Changing the Division Operator","Moshe Zadka, Guido van Rossum","2.2"
"SR","https://peps.python.org/pep-0239/","PEP 239 – Adding a Rational Type to Python","Christopher A. Craig, Moshe Zadka","2.2"
"SR","https://peps.python.org/pep-0240/","PEP 240 – Adding a Rational Literal to Python","Christopher A. Craig, Moshe Zadka","2.2"
"SS","https://peps.python.org/pep-0241/","PEP 241 – Metadata for Python Software Packages","A.M. Kuchling",""
"SR","https://peps.python.org/pep-0242/","PEP 242 – Numeric Kinds","Paul F. Dubois","2.2"
"SW","https://peps.python.org/pep-0243/","PEP 243 – Module Repository Upload Mechanism","Sean Reifschneider","2.1"
"SR","https://peps.python.org/pep-0244/","PEP 244 – The directive statement","Martin von Löwis","2.1"
"SR","https://peps.python.org/pep-0245/","PEP 245 – Python Interface Syntax","Michel Pelletier","2.2"
"SR","https://peps.python.org/pep-0246/","PEP 246 – Object Adaptation","Alex Martelli, Clark C. Evans","2.5"
"IF","https://peps.python.org/pep-0247/","PEP 247 – API for Cryptographic Hash Functions","A.M. Kuchling",""
"IF","https://peps.python.org/pep-0248/","PEP 248 – Python Database API Specification v1.0","Greg Stein, Marc-André Lemburg",""
"IF","https://peps.python.org/pep-0249/","PEP 249 – Python Database API Specification v2.0","Marc-André Lemburg",""
"SF","https://peps.python.org/pep-0250/","PEP 250 – Using site-packages on Windows","Paul Moore","2.2"
"IF","https://peps.python.org/pep-0251/","PEP 251 – Python 2.2 Release Schedule","Barry Warsaw, Guido van Rossum","2.2"
"SF","https://peps.python.org/pep-0252/","PEP 252 – Making Types Look More Like Classes","Guido van Rossum","2.2"
"SF","https://peps.python.org/pep-0253/","PEP 253 – Subtyping Built-in Types","Guido van Rossum","2.2"
"SR","https://peps.python.org/pep-0254/","PEP 254 – Making Classes Look More Like Types","Guido van Rossum","2.2"
"SF","https://peps.python.org/pep-0255/","PEP 255 – Simple Generators","Neil Schemenauer, Tim Peters, Magnus Lie Hetland","2.2"
"SR","https://peps.python.org/pep-0256/","PEP 256 – Docstring Processing System Framework","David Goodger",""
"IA","https://peps.python.org/pep-0257/","PEP 257 – Docstring Conventions","David Goodger, Guido van Rossum",""
"SR","https://peps.python.org/pep-0258/","PEP 258 – Docutils Design Specification","David Goodger",""
"SR","https://peps.python.org/pep-0259/","PEP 259 – Omit printing newline after newline","Guido van Rossum","2.2"
"SF","https://peps.python.org/pep-0260/","PEP 260 – Simplify xrange()","Guido van Rossum","2.2"
"SF","https://peps.python.org/pep-0261/","PEP 261 – Support for “wide” Unicode characters","Paul Prescod","2.2"
"SR","https://peps.python.org/pep-0262/","PEP 262 – A Database of Installed Python Packages","A.M. Kuchling",""
"SF","https://peps.python.org/pep-0263/","PEP 263 – Defining Python Source Code Encodings","Marc-André Lemburg, Martin von Löwis","2.3"
"SF","https://peps.python.org/pep-0264/","PEP 264 – Future statements in simulated shells","Michael Hudson","2.2"
"SR","https://peps.python.org/pep-0265/","PEP 265 – Sorting Dictionaries by Value","Grant Griffin","2.2"
"SW","https://peps.python.org/pep-0266/","PEP 266 – Optimizing Global Variable/Attribute Access","Skip Montanaro","2.3"
"SD","https://peps.python.org/pep-0267/","PEP 267 – Optimized Access to Module Namespaces","Jeremy Hylton","2.2"
"SR","https://peps.python.org/pep-0268/","PEP 268 – Extended HTTP functionality and WebDAV","Greg Stein","2.x"
"SD","https://peps.python.org/pep-0269/","PEP 269 – Pgen Module for Python","Jonathan Riehl","2.2"
"SR","https://peps.python.org/pep-0270/","PEP 270 – uniq method for list objects","Jason Petrone","2.2"
"SR","https://peps.python.org/pep-0271/","PEP 271 – Prefixing sys.path by command line option","Frédéric B. Giacometti","2.2"
"IF","https://peps.python.org/pep-0272/","PEP 272 – API for Block Encryption Algorithms v1.0","A.M. Kuchling",""
"SF","https://peps.python.org/pep-0273/","PEP 273 – Import Modules from Zip Archives","James C. Ahlstrom","2.3"
"SF","https://peps.python.org/pep-0274/","PEP 274 – Dict Comprehensions","Barry Warsaw","2.7, 3.0"
"SR","https://peps.python.org/pep-0275/","PEP 275 – Switching on Multiple Values","Marc-André Lemburg","2.6"
"SR","https://peps.python.org/pep-0276/","PEP 276 – Simple Iterator for ints","Jim Althoff","2.3"
"SF","https://peps.python.org/pep-0277/","PEP 277 – Unicode file name support for Windows NT","Neil Hodgson","2.3"
"SF","https://peps.python.org/pep-0278/","PEP 278 – Universal Newline Support","Jack Jansen","2.3"
"SF","https://peps.python.org/pep-0279/","PEP 279 – The enumerate() built-in function","Raymond Hettinger","2.3"
"SD","https://peps.python.org/pep-0280/","PEP 280 – Optimizing access to globals","Guido van Rossum","2.3"
"SR","https://peps.python.org/pep-0281/","PEP 281 – Loop Counter Iteration with range and xrange","Magnus Lie Hetland","2.3"
"SF","https://peps.python.org/pep-0282/","PEP 282 – A Logging System","Vinay Sajip, Trent Mick","2.3"
"IF","https://peps.python.org/pep-0283/","PEP 283 – Python 2.3 Release Schedule","Guido van Rossum","2.3"
"SR","https://peps.python.org/pep-0284/","PEP 284 – Integer for-loops","David Eppstein, Gregory Ewing","2.3"
"SF","https://peps.python.org/pep-0285/","PEP 285 – Adding a bool type","Guido van Rossum","2.3"
"SD","https://peps.python.org/pep-0286/","PEP 286 – Enhanced Argument Tuples","Martin von Löwis","2.3"
"IA","https://peps.python.org/pep-0287/","PEP 287 – reStructuredText Docstring Format","David Goodger",""
"SW","https://peps.python.org/pep-0288/","PEP 288 – Generators Attributes and Exceptions","Raymond Hettinger","2.5"
"SF","https://peps.python.org/pep-0289/","PEP 289 – Generator Expressions","Raymond Hettinger","2.4"
"IA","https://peps.python.org/pep-0290/","PEP 290 – Code Migration and Modernization","Raymond Hettinger",""
"IF","https://peps.python.org/pep-0291/","PEP 291 – Backward Compatibility for the Python 2 Standard Library","Neal Norwitz","2.3"
"SF","https://peps.python.org/pep-0292/","PEP 292 – Simpler String Substitutions","Barry Warsaw","2.4"
"SF","https://peps.python.org/pep-0293/","PEP 293 – Codec Error Handling Callbacks","Walter Dörwald","2.3"
"SR","https://peps.python.org/pep-0294/","PEP 294 – Type Names in the types Module","Oren Tirosh","2.5"
"SR","https://peps.python.org/pep-0295/","PEP 295 – Interpretation of multiline string constants","Stepan Koltsov","3.0"
"SW","https://peps.python.org/pep-0296/","PEP 296 – Adding a bytes Object Type","Scott Gilbert","2.3"
"SR","https://peps.python.org/pep-0297/","PEP 297 – Support for System Upgrades","Marc-André Lemburg","2.6"
"SW","https://peps.python.org/pep-0298/","PEP 298 – The Locked Buffer Interface","Thomas Heller","2.3"
"SR","https://peps.python.org/pep-0299/","PEP 299 – Special __main__() function in modules","Jeff Epler","2.3"
"SF","https://peps.python.org/pep-0301/","PEP 301 – Package Index and Metadata for Distutils","Richard Jones","2.3"
"SF","https://peps.python.org/pep-0302/","PEP 302 – New Import Hooks","Just van Rossum, Paul Moore","2.3"
"SR","https://peps.python.org/pep-0303/","PEP 303 – Extend divmod() for Multiple Divisors","Thomas Bellman","2.3"
"SW","https://peps.python.org/pep-0304/","PEP 304 – Controlling Generation of Bytecode Files","Skip Montanaro",""
"SF","https://peps.python.org/pep-0305/","PEP 305 – CSV File API","Kevin Altis, Dave Cole, Andrew McNamara, Skip Montanaro, Cliff Wells","2.3"
"IW","https://peps.python.org/pep-0306/","PEP 306 – How to Change Python’s Grammar","Michael Hudson, Jack Diederich, Alyssa Coghlan, Benjamin Peterson",""
"SF","https://peps.python.org/pep-0307/","PEP 307 – Extensions to the pickle protocol","Guido van Rossum, Tim Peters","2.3"
"SF","https://peps.python.org/pep-0308/","PEP 308 – Conditional Expressions","Guido van Rossum, Raymond Hettinger","2.5"
"SF","https://peps.python.org/pep-0309/","PEP 309 – Partial Function Application","Peter Harris","2.5"
"SR","https://peps.python.org/pep-0310/","PEP 310 – Reliable Acquisition/Release Pairs","Michael Hudson, Paul Moore","2.4"
"SF","https://peps.python.org/pep-0311/","PEP 311 – Simplified Global Interpreter Lock Acquisition for Extensions","Mark Hammond","2.3"
"SD","https://peps.python.org/pep-0312/","PEP 312 – Simple Implicit Lambda","Roman Suzi, Alex Martelli","2.4"
"SR","https://peps.python.org/pep-0313/","PEP 313 – Adding Roman Numeral Literals to Python","Mike Meyer","2.4"
"SS","https://peps.python.org/pep-0314/","PEP 314 – Metadata for Python Software Packages 1.1","A.M. Kuchling, Richard Jones","2.5"
"SR","https://peps.python.org/pep-0315/","PEP 315 – Enhanced While Loop","Raymond Hettinger, W Isaac Carroll","2.5"
"SD","https://peps.python.org/pep-0316/","PEP 316 – Programming by Contract for Python","Terence Way",""
"SR","https://peps.python.org/pep-0317/","PEP 317 – Eliminate Implicit Exception Instantiation","Steven Taschuk","2.4"
"SF","https://peps.python.org/pep-0318/","PEP 318 – Decorators for Functions and Methods","Kevin D. Smith, Jim J. Jewett, Skip Montanaro, Anthony Baxter","2.4"
"SR","https://peps.python.org/pep-0319/","PEP 319 – Python Synchronize/Asynchronize Block","Michel Pelletier","2.4"
"IF","https://peps.python.org/pep-0320/","PEP 320 – Python 2.4 Release Schedule","Barry Warsaw, Raymond Hettinger, Anthony Baxter","2.4"
"SW","https://peps.python.org/pep-0321/","PEP 321 – Date/Time Parsing and Formatting","A.M. Kuchling","2.4"
"SF","https://peps.python.org/pep-0322/","PEP 322 – Reverse Iteration","Raymond Hettinger","2.4"
"SD","https://peps.python.org/pep-0323/","PEP 323 – Copyable Iterators","Alex Martelli","2.5"
"SF","https://peps.python.org/pep-0324/","PEP 324 – subprocess - New process module","Peter Astrand","2.4"
"SR","https://peps.python.org/pep-0325/","PEP 325 – Resource-Release Support for Generators","Samuele Pedroni","2.4"
"SR","https://peps.python.org/pep-0326/","PEP 326 – A Case for Top and Bottom Values","Josiah Carlson, Terry Reedy","2.4"
"SF","https://peps.python.org/pep-0327/","PEP 327 – Decimal Data Type","Facundo Batista","2.4"
"SF","https://peps.python.org/pep-0328/","PEP 328 – Imports: Multi-Line and Absolute/Relative","Aahz","2.4, 2.5, 2.6"
"SR","https://peps.python.org/pep-0329/","PEP 329 – Treating Builtins as Constants in the Standard Library","Raymond Hettinger","2.4"
"SR","https://peps.python.org/pep-0330/","PEP 330 – Python Bytecode Verification","Michel Pelletier","2.6"
"SF","https://peps.python.org/pep-0331/","PEP 331 – Locale-Independent Float/String Conversions","Christian R. Reis","2.4"
"SR","https://peps.python.org/pep-0332/","PEP 332 – Byte vectors and String/Unicode Unification","Skip Montanaro","2.5"
"IF","https://peps.python.org/pep-0333/","PEP 333 – Python Web Server Gateway Interface v1.0","Phillip J. Eby",""
"SW","https://peps.python.org/pep-0334/","PEP 334 – Simple Coroutines via SuspendIteration","Clark C. Evans","3.0"
"SR","https://peps.python.org/pep-0335/","PEP 335 – Overloadable Boolean Operators","Gregory Ewing","3.3"
"SR","https://peps.python.org/pep-0336/","PEP 336 – Make None Callable","Andrew McClelland",""
"SD","https://peps.python.org/pep-0337/","PEP 337 – Logging Usage in the Standard Library","Michael P. Dubner","2.5"
"SF","https://peps.python.org/pep-0338/","PEP 338 – Executing modules as scripts","Alyssa Coghlan","2.5"
"IW","https://peps.python.org/pep-0339/","PEP 339 – Design of the CPython Compiler","Brett Cannon",""
"SR","https://peps.python.org/pep-0340/","PEP 340 – Anonymous Block Statements","Guido van Rossum",""
"SF","https://peps.python.org/pep-0341/","PEP 341 – Unifying try-except and try-finally","Georg Brandl","2.5"
"SF","https://peps.python.org/pep-0342/","PEP 342 – Coroutines via Enhanced Generators","Guido van Rossum, Phillip J. Eby","2.5"
"SF","https://peps.python.org/pep-0343/","PEP 343 – The “with” Statement","Guido van Rossum, Alyssa Coghlan","2.5"
"SS","https://peps.python.org/pep-0344/","PEP 344 – Exception Chaining and Embedded Tracebacks","Ka-Ping Yee","2.5"
"SS","https://peps.python.org/pep-0345/","PEP 345 – Metadata for Python Software Packages 1.2","Richard Jones","2.7"
"SW","https://peps.python.org/pep-0346/","PEP 346 – User Defined (”with”) Statements","Alyssa Coghlan","2.5"
"PF","https://peps.python.org/pep-0347/","PEP 347 – Migrating the Python CVS to Subversion","Martin von Löwis",""
"SR","https://peps.python.org/pep-0348/","PEP 348 – Exception Reorganization for Python 3.0","Brett Cannon",""
"SR","https://peps.python.org/pep-0349/","PEP 349 – Allow str() to return unicode strings","Neil Schemenauer","2.5"
"IR","https://peps.python.org/pep-0350/","PEP 350 – Codetags","Micah Elliott",""
"SR","https://peps.python.org/pep-0351/","PEP 351 – The freeze protocol","Barry Warsaw",""
"SF","https://peps.python.org/pep-0352/","PEP 352 – Required Superclass for Exceptions","Brett Cannon, Guido van Rossum","2.5"
"SF","https://peps.python.org/pep-0353/","PEP 353 – Using ssize_t as the index type","Martin von Löwis","2.5"
"SS","https://peps.python.org/pep-0354/","PEP 354 – Enumerations in Python","Ben Finney","2.6"
"SR","https://peps.python.org/pep-0355/","PEP 355 – Path - Object oriented filesystem paths","Björn Lindqvist","2.5"
"IF","https://peps.python.org/pep-0356/","PEP 356 – Python 2.5 Release Schedule","Neal Norwitz, Guido van Rossum, Anthony Baxter","2.5"
"SF","https://peps.python.org/pep-0357/","PEP 357 – Allowing Any Object to be Used for Slicing","Travis Oliphant","2.5"
"SF","https://peps.python.org/pep-0358/","PEP 358 – The “bytes” Object","Neil Schemenauer, Guido van Rossum","2.6, 3.0"
"SW","https://peps.python.org/pep-0359/","PEP 359 – The “make” Statement","Steven Bethard","2.6"
"PF","https://peps.python.org/pep-0360/","PEP 360 – Externally Maintained Packages","Brett Cannon",""
"IF","https://peps.python.org/pep-0361/","PEP 361 – Python 2.6 and 3.0 Release Schedule","Neal Norwitz, Barry Warsaw","2.6, 3.0"
"SF","https://peps.python.org/pep-0362/","PEP 362 – Function Signature Object","Brett Cannon, Jiwon Seo, Yury Selivanov, Larry Hastings","3.3"
"SR","https://peps.python.org/pep-0363/","PEP 363 – Syntax For Dynamic Attribute Access","Ben North",""
"SW","https://peps.python.org/pep-0364/","PEP 364 – Transitioning to the Py3K Standard Library","Barry Warsaw","2.6"
"SR","https://peps.python.org/pep-0365/","PEP 365 – Adding the pkg_resources module","Phillip J. Eby",""
"SF","https://peps.python.org/pep-0366/","PEP 366 – Main module explicit relative imports","Alyssa Coghlan","2.6, 3.0"
"SS","https://peps.python.org/pep-0367/","PEP 367 – New Super","Calvin Spealman, Tim Delaney","2.6"
"SD","https://peps.python.org/pep-0368/","PEP 368 – Standard image protocol and class","Lino Mastrodomenico","2.6, 3.0"
"SW","https://peps.python.org/pep-0369/","PEP 369 – Post import hooks","Christian Heimes","2.6, 3.0"
"SF","https://peps.python.org/pep-0370/","PEP 370 – Per user site-packages directory","Christian Heimes","2.6, 3.0"
"SF","https://peps.python.org/pep-0371/","PEP 371 – Addition of the multiprocessing package to the standard library","Jesse Noller, Richard Oudkerk","2.6, 3.0"
"SF","https://peps.python.org/pep-0372/","PEP 372 – Adding an ordered dictionary to collections","Armin Ronacher, Raymond Hettinger","2.7, 3.1"
"IF","https://peps.python.org/pep-0373/","PEP 373 – Python 2.7 Release Schedule","Benjamin Peterson","2.7"
"PF","https://peps.python.org/pep-0374/","PEP 374 – Choosing a distributed VCS for the Python project","Brett Cannon, Stephen J. Turnbull, Alexandre Vassalotti, Barry Warsaw, Dirkjan Ochtman",""
"IF","https://peps.python.org/pep-0375/","PEP 375 – Python 3.1 Release Schedule","Benjamin Peterson","3.1"
"SF","https://peps.python.org/pep-0376/","PEP 376 – Database of Installed Python Distributions","Tarek Ziadé","2.7, 3.2"
"SR","https://peps.python.org/pep-0377/","PEP 377 – Allow __enter__() methods to skip the statement body","Alyssa Coghlan","2.7, 3.1"
"SF","https://peps.python.org/pep-0378/","PEP 378 – Format Specifier for Thousands Separator","Raymond Hettinger","2.7, 3.1"
"SW","https://peps.python.org/pep-0379/","PEP 379 – Adding an Assignment Expression","Jervis Whitley","2.7, 3.2"
"SF","https://peps.python.org/pep-0380/","PEP 380 – Syntax for Delegating to a Subgenerator","Gregory Ewing","3.3"
"SW","https://peps.python.org/pep-0381/","PEP 381 – Mirroring infrastructure for PyPI","Tarek Ziadé, Martin von Löwis",""
"SR","https://peps.python.org/pep-0382/","PEP 382 – Namespace Packages","Martin von Löwis","3.2"
"SF","https://peps.python.org/pep-0383/","PEP 383 – Non-decodable Bytes in System Character Interfaces","Martin von Löwis","3.1"
"SF","https://peps.python.org/pep-0384/","PEP 384 – Defining a Stable ABI","Martin von Löwis","3.2"
"PF","https://peps.python.org/pep-0385/","PEP 385 – Migrating from Subversion to Mercurial","Dirkjan Ochtman, Antoine Pitrou, Georg Brandl",""
"SS","https://peps.python.org/pep-0386/","PEP 386 – Changing the version comparison module in Distutils","Tarek Ziadé",""
"PA","https://peps.python.org/pep-0387/","PEP 387 – Backwards Compatibility Policy","Benjamin Peterson",""
"SF","https://peps.python.org/pep-0389/","PEP 389 – argparse - New Command Line Parsing Module","Steven Bethard","2.7, 3.2"
"SR","https://peps.python.org/pep-0390/","PEP 390 – Static metadata for Distutils","Tarek Ziadé","2.7, 3.2"
"SF","https://peps.python.org/pep-0391/","PEP 391 – Dictionary-Based Configuration For Logging","Vinay Sajip","2.7, 3.2"
"IF","https://peps.python.org/pep-0392/","PEP 392 – Python 3.2 Release Schedule","Georg Brandl","3.2"
"SF","https://peps.python.org/pep-0393/","PEP 393 – Flexible String Representation","Martin von Löwis","3.3"
"IA","https://peps.python.org/pep-0394/","PEP 394 – The “python” Command on Unix-Like Systems","Kerrick Staley, Alyssa Coghlan, Barry Warsaw, Petr Viktorin, Miro Hrončok, Carol Willing",""
"SW","https://peps.python.org/pep-0395/","PEP 395 – Qualified Names for Modules","Alyssa Coghlan","3.4"
"IR","https://peps.python.org/pep-0396/","PEP 396 – Module Version Numbers","Barry Warsaw",""
"SF","https://peps.python.org/pep-0397/","PEP 397 – Python launcher for Windows","Mark Hammond, Martin von Löwis","3.3"
"IF","https://peps.python.org/pep-0398/","PEP 398 – Python 3.3 Release Schedule","Georg Brandl","3.3"
"IF","https://peps.python.org/pep-0399/","PEP 399 – Pure Python/C Accelerator Module Compatibility Requirements","Brett Cannon","3.3"
"SD","https://peps.python.org/pep-0400/","PEP 400 – Deprecate codecs.StreamReader and codecs.StreamWriter","Victor Stinner","3.3"
"PR","https://peps.python.org/pep-0401/","PEP 401 – BDFL Retirement","Barry Warsaw, Brett Cannon",""
"SR","https://peps.python.org/pep-0402/","PEP 402 – Simplified Package Layout and Partitioning","Phillip J. Eby","3.3"
"SD","https://peps.python.org/pep-0403/","PEP 403 – General purpose decorator clause (aka “@in” clause)","Alyssa Coghlan","3.4"
"IF","https://peps.python.org/pep-0404/","PEP 404 – Python 2.8 Un-release Schedule","Barry Warsaw","2.8"
"SF","https://peps.python.org/pep-0405/","PEP 405 – Python Virtual Environments","Carl Meyer","3.3"
"SW","https://peps.python.org/pep-0406/","PEP 406 – Improved Encapsulation of Import State","Alyssa Coghlan, Greg Slodkowicz","3.4"
"PD","https://peps.python.org/pep-0407/","PEP 407 – New release cycle and introducing long-term support versions","Antoine Pitrou, Georg Brandl, Barry Warsaw",""
"SR","https://peps.python.org/pep-0408/","PEP 408 – Standard library __preview__ package","Alyssa Coghlan, Eli Bendersky","3.3"
"SF","https://peps.python.org/pep-0409/","PEP 409 – Suppressing exception context","Ethan Furman","3.3"
"SR","https://peps.python.org/pep-0410/","PEP 410 – Use decimal.Decimal type for timestamps","Victor Stinner","3.3"
"IS","https://peps.python.org/pep-0411/","PEP 411 – Provisional packages in the Python standard library","Alyssa Coghlan, Eli Bendersky","3.3"
"SF","https://peps.python.org/pep-0412/","PEP 412 – Key-Sharing Dictionary","Mark Shannon","3.3"
"PW","https://peps.python.org/pep-0413/","PEP 413 – Faster evolution of the Python Standard Library","Alyssa Coghlan",""
"SF","https://peps.python.org/pep-0414/","PEP 414 – Explicit Unicode Literal for Python 3.3","Armin Ronacher, Alyssa Coghlan","3.3"
"SF","https://peps.python.org/pep-0415/","PEP 415 – Implement context suppression with exception attributes","Benjamin Peterson","3.3"
"SR","https://peps.python.org/pep-0416/","PEP 416 – Add a frozendict builtin type","Victor Stinner","3.3"
"SF","https://peps.python.org/pep-0417/","PEP 417 – Including mock in the Standard Library","Michael Foord","3.3"
"SF","https://peps.python.org/pep-0418/","PEP 418 – Add monotonic time, performance counter, and process time functions","Cameron Simpson, Jim J. Jewett, Stephen J. Turnbull, Victor Stinner","3.3"
"SD","https://peps.python.org/pep-0419/","PEP 419 – Protecting cleanup statements from interruptions","Paul Colomiets","3.3"
"SF","https://peps.python.org/pep-0420/","PEP 420 – Implicit Namespace Packages","Eric V. Smith","3.3"
"SF","https://peps.python.org/pep-0421/","PEP 421 – Adding sys.implementation","Eric Snow","3.3"
"SW","https://peps.python.org/pep-0422/","PEP 422 – Simpler customisation of class creation","Alyssa Coghlan, Daniel Urban","3.5"
"ID","https://peps.python.org/pep-0423/","PEP 423 – Naming conventions and recipes related to packaging","Benoit Bryon",""
"SF","https://peps.python.org/pep-0424/","PEP 424 – A method for exposing a length hint","Alex Gaynor","3.4"
"SF","https://peps.python.org/pep-0425/","PEP 425 – Compatibility Tags for Built Distributions","Daniel Holth","3.4"
"IW","https://peps.python.org/pep-0426/","PEP 426 – Metadata for Python Software Packages 2.0","Alyssa Coghlan, Daniel Holth, Donald Stufft",""
"SF","https://peps.python.org/pep-0427/","PEP 427 – The Wheel Binary Package Format 1.0","Daniel Holth",""
"SF","https://peps.python.org/pep-0428/","PEP 428 – The pathlib module – object-oriented filesystem paths","Antoine Pitrou","3.4"
"IF","https://peps.python.org/pep-0429/","PEP 429 – Python 3.4 Release Schedule","Larry Hastings","3.4"
"IF","https://peps.python.org/pep-0430/","PEP 430 – Migrating to Python 3 as the default online documentation","Alyssa Coghlan",""
"SS","https://peps.python.org/pep-0431/","PEP 431 – Time zone support improvements","Lennart Regebro",""
"SW","https://peps.python.org/pep-0432/","PEP 432 – Restructuring the CPython startup sequence","Alyssa Coghlan, Victor Stinner, Eric Snow",""
"SS","https://peps.python.org/pep-0433/","PEP 433 – Easier suppression of file descriptor inheritance","Victor Stinner","3.4"
"IA","https://peps.python.org/pep-0434/","PEP 434 – IDLE Enhancement Exception for All Branches","Todd Rovito, Terry Reedy",""
"SF","https://peps.python.org/pep-0435/","PEP 435 – Adding an Enum type to the Python standard library","Barry Warsaw, Eli Bendersky, Ethan Furman","3.4"
"SF","https://peps.python.org/pep-0436/","PEP 436 – The Argument Clinic DSL","Larry Hastings","3.4"
"SR","https://peps.python.org/pep-0437/","PEP 437 – A DSL for specifying signatures, annotations and argument converters","Stefan Krah","3.4"
"PS","https://peps.python.org/pep-0438/","PEP 438 – Transitioning to release-file hosting on PyPI","Holger Krekel, Carl Meyer",""
"SR","https://peps.python.org/pep-0439/","PEP 439 – Inclusion of implicit pip bootstrap in Python installation","Richard Jones","3.4"
"SF","https://peps.python.org/pep-0440/","PEP 440 – Version Identification and Dependency Specification","Alyssa Coghlan, Donald Stufft",""
"SF","https://peps.python.org/pep-0441/","PEP 441 – Improving Python ZIP Application Support","Daniel Holth, Paul Moore","3.5"
"SF","https://peps.python.org/pep-0442/","PEP 442 – Safe object finalization","Antoine Pitrou","3.4"
"SF","https://peps.python.org/pep-0443/","PEP 443 – Single-dispatch generic functions","Łukasz Langa","3.4"
"ID","https://peps.python.org/pep-0444/","PEP 444 – Python Web3 Interface","Chris McDonough, Armin Ronacher",""
"SF","https://peps.python.org/pep-0445/","PEP 445 – Add new APIs to customize Python memory allocators","Victor Stinner","3.4"
"SF","https://peps.python.org/pep-0446/","PEP 446 – Make newly created file descriptors non-inheritable","Victor Stinner","3.4"
"SD","https://peps.python.org/pep-0447/","PEP 447 – Add __getdescriptor__ method to metaclass","Ronald Oussoren",""
"SF","https://peps.python.org/pep-0448/","PEP 448 – Additional Unpacking Generalizations","Joshua Landau","3.5"
"PF","https://peps.python.org/pep-0449/","PEP 449 – Removal of the PyPI Mirror Auto Discovery and Naming Scheme","Donald Stufft",""
"SF","https://peps.python.org/pep-0450/","PEP 450 – Adding A Statistics Module To The Standard Library","Steven D’Aprano","3.4"
"SF","https://peps.python.org/pep-0451/","PEP 451 – A ModuleSpec Type for the Import System","Eric Snow","3.4"
"IF","https://peps.python.org/pep-0452/","PEP 452 – API for Cryptographic Hash Functions v2.0","A.M. Kuchling, Christian Heimes",""
"SF","https://peps.python.org/pep-0453/","PEP 453 – Explicit bootstrapping of pip in Python installations","Donald Stufft, Alyssa Coghlan",""
"SF","https://peps.python.org/pep-0454/","PEP 454 – Add a new tracemalloc module to trace Python memory allocations","Victor Stinner","3.4"
"SR","https://peps.python.org/pep-0455/","PEP 455 – Adding a key-transforming dictionary to collections","Antoine Pitrou","3.5"
"SF","https://peps.python.org/pep-0456/","PEP 456 – Secure and interchangeable hash algorithm","Christian Heimes","3.4"
"IF","https://peps.python.org/pep-0457/","PEP 457 – Notation For Positional-Only Parameters","Larry Hastings",""
"SA","https://peps.python.org/pep-0458/","PEP 458 – Secure PyPI downloads with signed repository metadata","Trishank Karthik Kuppusamy, Vladimir Diaz, Marina Moore, Lukas Puehringer, Joshua Lock, Lois Anne DeLong, Justin Cappos",""
"SW","https://peps.python.org/pep-0459/","PEP 459 – Standard Metadata Extensions for Python Software Packages","Alyssa Coghlan",""
"SW","https://peps.python.org/pep-0460/","PEP 460 – Add binary interpolation and formatting","Antoine Pitrou","3.5"
"SF","https://peps.python.org/pep-0461/","PEP 461 – Adding % formatting to bytes and bytearray","Ethan Furman","3.5"
"PW","https://peps.python.org/pep-0462/","PEP 462 – Core development workflow automation for CPython","Alyssa Coghlan",""
"SR","https://peps.python.org/pep-0463/","PEP 463 – Exception-catching expressions","Chris Angelico","3.5"
"PF","https://peps.python.org/pep-0464/","PEP 464 – Removal of the PyPI Mirror Authenticity API","Donald Stufft",""
"SF","https://peps.python.org/pep-0465/","PEP 465 – A dedicated infix operator for matrix multiplication","Nathaniel J. Smith","3.5"
"SF","https://peps.python.org/pep-0466/","PEP 466 – Network Security Enhancements for Python 2.7.x","Alyssa Coghlan","2.7.9"
"S","https://peps.python.org/pep-0467/","PEP 467 – Minor API improvements for binary sequences","Alyssa Coghlan, Ethan Furman","3.13"
"SF","https://peps.python.org/pep-0468/","PEP 468 – Preserving the order of **kwargs in a function.","Eric Snow","3.6"
"SW","https://peps.python.org/pep-0469/","PEP 469 – Migration of dict iteration code to Python 3","Alyssa Coghlan","3.5"
"PF","https://peps.python.org/pep-0470/","PEP 470 – Removing External Hosting Support on PyPI","Donald Stufft",""
"SF","https://peps.python.org/pep-0471/","PEP 471 – os.scandir() function – a better and faster directory iterator","Ben Hoyt","3.5"
"SR","https://peps.python.org/pep-0472/","PEP 472 – Support for indexing with keyword arguments","Stefano Borini, Joseph Martinot-Lagarde","3.6"
"SR","https://peps.python.org/pep-0473/","PEP 473 – Adding structured data to built-in exceptions","Sebastian Kreft",""
"PW","https://peps.python.org/pep-0474/","PEP 474 – Creating forge.python.org","Alyssa Coghlan",""
"SF","https://peps.python.org/pep-0475/","PEP 475 – Retry system calls failing with EINTR","Charles-François Natali, Victor Stinner","3.5"
"SF","https://peps.python.org/pep-0476/","PEP 476 – Enabling certificate verification by default for stdlib http clients","Alex Gaynor","2.7.9, 3.4.3, 3.5"
"SF","https://peps.python.org/pep-0477/","PEP 477 – Backport ensurepip (PEP 453) to Python 2.7","Donald Stufft, Alyssa Coghlan",""
"IF","https://peps.python.org/pep-0478/","PEP 478 – Python 3.5 Release Schedule","Larry Hastings","3.5"
"SF","https://peps.python.org/pep-0479/","PEP 479 – Change StopIteration handling inside generators","Chris Angelico, Guido van Rossum","3.5"
"S","https://peps.python.org/pep-0480/","PEP 480 – Surviving a Compromise of PyPI: End-to-end signing of packages","Trishank Karthik Kuppusamy, Vladimir Diaz, Justin Cappos, Marina Moore",""
"PW","https://peps.python.org/pep-0481/","PEP 481 – Migrate CPython to Git, Github, and Phabricator","Donald Stufft",""
"IF","https://peps.python.org/pep-0482/","PEP 482 – Literature Overview for Type Hints","Łukasz Langa",""
"IF","https://peps.python.org/pep-0483/","PEP 483 – The Theory of Type Hints","Guido van Rossum, Ivan Levkivskyi",""
"SF","https://peps.python.org/pep-0484/","PEP 484 – Type Hints","Guido van Rossum, Jukka Lehtosalo, Łukasz Langa","3.5"
"SF","https://peps.python.org/pep-0485/","PEP 485 – A Function for testing approximate equality","Christopher Barker","3.5"
"SF","https://peps.python.org/pep-0486/","PEP 486 – Make the Python Launcher aware of virtual environments","Paul Moore","3.5"
"SF","https://peps.python.org/pep-0487/","PEP 487 – Simpler customisation of class creation","Martin Teichmann","3.6"
"SF","https://peps.python.org/pep-0488/","PEP 488 – Elimination of PYO files","Brett Cannon","3.5"
"SF","https://peps.python.org/pep-0489/","PEP 489 – Multi-phase extension module initialization","Petr Viktorin, Stefan Behnel, Alyssa Coghlan","3.5"
"SR","https://peps.python.org/pep-0490/","PEP 490 – Chain exceptions at C level","Victor Stinner","3.6"
"SD","https://peps.python.org/pep-0491/","PEP 491 – The Wheel Binary Package Format 1.9","Daniel Holth",""
"SF","https://peps.python.org/pep-0492/","PEP 492 – Coroutines with async and await syntax","Yury Selivanov","3.5"
"SF","https://peps.python.org/pep-0493/","PEP 493 – HTTPS verification migration tools for Python 2.7","Alyssa Coghlan, Robert Kuska, Marc-André Lemburg","2.7.12"
"IF","https://peps.python.org/pep-0494/","PEP 494 – Python 3.6 Release Schedule","Ned Deily","3.6"
"SF","https://peps.python.org/pep-0495/","PEP 495 – Local Time Disambiguation","Alexander Belopolsky, Tim Peters","3.6"
"IR","https://peps.python.org/pep-0496/","PEP 496 – Environment Markers","James Polley",""
"PR","https://peps.python.org/pep-0497/","PEP 497 – A standard mechanism for backward compatibility","Ed Schofield",""
"SF","https://peps.python.org/pep-0498/","PEP 498 – Literal String Interpolation","Eric V. Smith","3.6"
"SD","https://peps.python.org/pep-0499/","PEP 499 – python -m foo should also bind 'foo' in sys.modules","Cameron Simpson, Chris Angelico, Joseph Jevnik","3.10"
"SR","https://peps.python.org/pep-0500/","PEP 500 – A protocol for delegating datetime methods to their tzinfo implementations","Alexander Belopolsky, Tim Peters",""
"SD","https://peps.python.org/pep-0501/","PEP 501 – General purpose string interpolation","Alyssa Coghlan","3.6"
"IR","https://peps.python.org/pep-0502/","PEP 502 – String Interpolation - Extended Discussion","Mike G. Miller","3.6"
"SF","https://peps.python.org/pep-0503/","PEP 503 – Simple Repository API","Donald Stufft",""
"SW","https://peps.python.org/pep-0504/","PEP 504 – Using the System RNG by default","Alyssa Coghlan","3.6"
"SD","https://peps.python.org/pep-0505/","PEP 505 – None-aware operators","Mark E. Haase, Steve Dower","3.8"
"SF","https://peps.python.org/pep-0506/","PEP 506 – Adding A Secrets Module To The Standard Library","Steven D’Aprano","3.6"
"PR","https://peps.python.org/pep-0507/","PEP 507 – Migrate CPython to Git and GitLab","Barry Warsaw",""
"SF","https://peps.python.org/pep-0508/","PEP 508 – Dependency specification for Python Software Packages","Robert Collins",""
"SS","https://peps.python.org/pep-0509/","PEP 509 – Add a private version to dict","Victor Stinner","3.6"
"SR","https://peps.python.org/pep-0510/","PEP 510 – Specialize functions with guards","Victor Stinner","3.6"
"SR","https://peps.python.org/pep-0511/","PEP 511 – API for code transformers","Victor Stinner","3.6"
"PF","https://peps.python.org/pep-0512/","PEP 512 – Migrating from hg.python.org to GitHub","Brett Cannon",""
"IS","https://peps.python.org/pep-0513/","PEP 513 – A Platform Tag for Portable Linux Built Distributions","Robert T. McGibbon, Nathaniel J. Smith",""
"IA","https://peps.python.org/pep-0514/","PEP 514 – Python registration in the Windows registry","Steve Dower",""
"SF","https://peps.python.org/pep-0515/","PEP 515 – Underscores in Numeric Literals","Georg Brandl, Serhiy Storchaka","3.6"
"SR","https://peps.python.org/pep-0516/","PEP 516 – Build system abstraction for pip/conda etc","Robert Collins, Nathaniel J. Smith",""
"SF","https://peps.python.org/pep-0517/","PEP 517 – A build-system independent format for source trees","Nathaniel J. Smith, Thomas Kluyver",""
"SF","https://peps.python.org/pep-0518/","PEP 518 – Specifying Minimum Build System Requirements for Python Projects","Brett Cannon, Nathaniel J. Smith, Donald Stufft",""
"SF","https://peps.python.org/pep-0519/","PEP 519 – Adding a file system path protocol","Brett Cannon, Koos Zevenhoven","3.6"
"SF","https://peps.python.org/pep-0520/","PEP 520 – Preserving Class Attribute Definition Order","Eric Snow","3.6"
"SW","https://peps.python.org/pep-0521/","PEP 521 – Managing global context via ‘with’ blocks in generators and coroutines","Nathaniel J. Smith","3.6"
"SR","https://peps.python.org/pep-0522/","PEP 522 – Allow BlockingIOError in security sensitive APIs","Alyssa Coghlan, Nathaniel J. Smith","3.6"
"SF","https://peps.python.org/pep-0523/","PEP 523 – Adding a frame evaluation API to CPython","Brett Cannon, Dino Viehland","3.6"
"SF","https://peps.python.org/pep-0524/","PEP 524 – Make os.urandom() blocking on Linux","Victor Stinner","3.6"
"SF","https://peps.python.org/pep-0525/","PEP 525 – Asynchronous Generators","Yury Selivanov","3.6"
"SF","https://peps.python.org/pep-0526/","PEP 526 – Syntax for Variable Annotations","Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, Guido van Rossum","3.6"
"SF","https://peps.python.org/pep-0527/","PEP 527 – Removing Un(der)used file types/extensions on PyPI","Donald Stufft",""
"SF","https://peps.python.org/pep-0528/","PEP 528 – Change Windows console encoding to UTF-8","Steve Dower","3.6"
"SF","https://peps.python.org/pep-0529/","PEP 529 – Change Windows filesystem encoding to UTF-8","Steve Dower","3.6"
"SF","https://peps.python.org/pep-0530/","PEP 530 – Asynchronous Comprehensions","Yury Selivanov","3.6"
"SW","https://peps.python.org/pep-0531/","PEP 531 – Existence checking operators","Alyssa Coghlan","3.7"
"SD","https://peps.python.org/pep-0532/","PEP 532 – A circuit breaking protocol and binary operators","Alyssa Coghlan, Mark E. Haase","3.8"
"SD","https://peps.python.org/pep-0533/","PEP 533 – Deterministic cleanup for iterators","Nathaniel J. Smith",""
"SD","https://peps.python.org/pep-0534/","PEP 534 – Improved Errors for Missing Standard Library Modules","Tomáš Orsava, Petr Viktorin, Alyssa Coghlan",""
"SD","https://peps.python.org/pep-0535/","PEP 535 – Rich comparison chaining","Alyssa Coghlan","3.8"
"SW","https://peps.python.org/pep-0536/","PEP 536 – Final Grammar for Literal String Interpolation","Philipp Angerer","3.7"
"IF","https://peps.python.org/pep-0537/","PEP 537 – Python 3.7 Release Schedule","Ned Deily","3.7"
"SF","https://peps.python.org/pep-0538/","PEP 538 – Coercing the legacy C locale to a UTF-8 based locale","Alyssa Coghlan","3.7"
"SF","https://peps.python.org/pep-0539/","PEP 539 – A New C-API for Thread-Local Storage in CPython","Erik M. Bray, Masayuki Yamamoto","3.7"
"SF","https://peps.python.org/pep-0540/","PEP 540 – Add a new UTF-8 Mode","Victor Stinner","3.7"
"PF","https://peps.python.org/pep-0541/","PEP 541 – Package Index Name Retention","Łukasz Langa",""
"SR","https://peps.python.org/pep-0542/","PEP 542 – Dot Notation Assignment In Function Header","Markus Meskanen",""
"SW","https://peps.python.org/pep-0543/","PEP 543 – A Unified TLS API for Python","Cory Benfield, Christian Heimes","3.7"
"SA","https://peps.python.org/pep-0544/","PEP 544 – Protocols: Structural subtyping (static duck typing)","Ivan Levkivskyi, Jukka Lehtosalo, Łukasz Langa","3.8"
"PF","https://peps.python.org/pep-0545/","PEP 545 – Python Documentation Translations","Julien Palard, Inada Naoki, Victor Stinner",""
"SR","https://peps.python.org/pep-0546/","PEP 546 – Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7","Victor Stinner, Cory Benfield","2.7"
"SD","https://peps.python.org/pep-0547/","PEP 547 – Running extension modules using the -m option","Marcel Plch, Petr Viktorin","3.7"
"SR","https://peps.python.org/pep-0548/","PEP 548 – More Flexible Loop Control","R David Murray","3.7"
"SR","https://peps.python.org/pep-0549/","PEP 549 – Instance Descriptors","Larry Hastings","3.7"
"SW","https://peps.python.org/pep-0550/","PEP 550 – Execution Context","Yury Selivanov, Elvis Pranskevichus","3.7"
"IW","https://peps.python.org/pep-0551/","PEP 551 – Security transparency in the Python runtime","Steve Dower","3.7"
"SF","https://peps.python.org/pep-0552/","PEP 552 – Deterministic pycs","Benjamin Peterson","3.7"
"SF","https://peps.python.org/pep-0553/","PEP 553 – Built-in breakpoint()","Barry Warsaw","3.7"
"SS","https://peps.python.org/pep-0554/","PEP 554 – Multiple Interpreters in the Stdlib","Eric Snow","3.13"
"SW","https://peps.python.org/pep-0555/","PEP 555 – Context-local variables (contextvars)","Koos Zevenhoven","3.7"
"SD","https://peps.python.org/pep-0556/","PEP 556 – Threaded garbage collection","Antoine Pitrou","3.7"
"SF","https://peps.python.org/pep-0557/","PEP 557 – Data Classes","Eric V. Smith","3.7"
"SD","https://peps.python.org/pep-0558/","PEP 558 – Defined semantics for locals()","Alyssa Coghlan","3.13"
"SR","https://peps.python.org/pep-0559/","PEP 559 – Built-in noop()","Barry Warsaw","3.7"
"SA","https://peps.python.org/pep-0560/","PEP 560 – Core support for typing module and generic types","Ivan Levkivskyi","3.7"
"SF","https://peps.python.org/pep-0561/","PEP 561 – Distributing and Packaging Type Information","Ethan Smith","3.7"
"SF","https://peps.python.org/pep-0562/","PEP 562 – Module __getattr__ and __dir__","Ivan Levkivskyi","3.7"
"SA","https://peps.python.org/pep-0563/","PEP 563 – Postponed Evaluation of Annotations","Łukasz Langa","3.7"
"SF","https://peps.python.org/pep-0564/","PEP 564 – Add new time functions with nanosecond resolution","Victor Stinner","3.7"
"SF","https://peps.python.org/pep-0565/","PEP 565 – Show DeprecationWarning in __main__","Alyssa Coghlan","3.7"
"SF","https://peps.python.org/pep-0566/","PEP 566 – Metadata for Python Software Packages 2.1","Dustin Ingram","3.x"
"SF","https://peps.python.org/pep-0567/","PEP 567 – Context Variables","Yury Selivanov","3.7"
"SD","https://peps.python.org/pep-0568/","PEP 568 – Generator-sensitivity for Context Variables","Nathaniel J. Smith","3.8"
"IA","https://peps.python.org/pep-0569/","PEP 569 – Python 3.8 Release Schedule","Łukasz Langa","3.8"
"SF","https://peps.python.org/pep-0570/","PEP 570 – Python Positional-Only Parameters","Larry Hastings, Pablo Galindo, Mario Corchero, Eric N. Vander Weele","3.8"
"IS","https://peps.python.org/pep-0571/","PEP 571 – The manylinux2010 Platform Tag","Mark  Williams, Geoffrey Thomas, Thomas Kluyver",""
"SF","https://peps.python.org/pep-0572/","PEP 572 – Assignment Expressions","Chris Angelico, Tim Peters, Guido van Rossum","3.8"
"SF","https://peps.python.org/pep-0573/","PEP 573 – Module State Access from C Extension Methods","Petr Viktorin, Alyssa Coghlan, Eric Snow, Marcel Plch","3.9"
"SF","https://peps.python.org/pep-0574/","PEP 574 – Pickle protocol 5 with out-of-band data","Antoine Pitrou","3.8"
"SW","https://peps.python.org/pep-0575/","PEP 575 – Unifying function/method classes","Jeroen Demeyer","3.8"
"SW","https://peps.python.org/pep-0576/","PEP 576 – Rationalize Built-in function classes","Mark Shannon","3.8"
"SW","https://peps.python.org/pep-0577/","PEP 577 – Augmented Assignment Expressions","Alyssa Coghlan","3.8"
"SA","https://peps.python.org/pep-0578/","PEP 578 – Python Runtime Audit Hooks","Steve Dower","3.8"
"IF","https://peps.python.org/pep-0579/","PEP 579 – Refactoring C functions and methods","Jeroen Demeyer",""
"SR","https://peps.python.org/pep-0580/","PEP 580 – The C call protocol","Jeroen Demeyer","3.8"
"PA","https://peps.python.org/pep-0581/","PEP 581 – Using GitHub Issues for CPython","Mariatta",""
"SR","https://peps.python.org/pep-0582/","PEP 582 – Python local packages directory","Kushal Das, Steve Dower, Donald Stufft, Alyssa Coghlan","3.12"
"IW","https://peps.python.org/pep-0583/","PEP 583 – A Concurrency Memory Model for Python","Jeffrey Yasskin",""
"SF","https://peps.python.org/pep-0584/","PEP 584 – Add Union Operators To dict","Steven D’Aprano, Brandt Bucher","3.9"
"SF","https://peps.python.org/pep-0585/","PEP 585 – Type Hinting Generics In Standard Collections","Łukasz Langa","3.9"
"SA","https://peps.python.org/pep-0586/","PEP 586 – Literal Types","Michael Lee, Ivan Levkivskyi, Jukka Lehtosalo","3.8"
"SF","https://peps.python.org/pep-0587/","PEP 587 – Python Initialization Configuration","Victor Stinner, Alyssa Coghlan","3.8"
"I","https://peps.python.org/pep-0588/","PEP 588 – GitHub Issues Migration Plan","Mariatta",""
"SA","https://peps.python.org/pep-0589/","PEP 589 – TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys","Jukka Lehtosalo","3.8"
"SA","https://peps.python.org/pep-0590/","PEP 590 – Vectorcall: a fast calling protocol for CPython","Mark Shannon, Jeroen Demeyer","3.8"
"SA","https://peps.python.org/pep-0591/","PEP 591 – Adding a final qualifier to typing","Michael J. Sullivan, Ivan Levkivskyi","3.8"
"SF","https://peps.python.org/pep-0592/","PEP 592 – Adding “Yank” Support to the Simple API","Donald Stufft",""
"SA","https://peps.python.org/pep-0593/","PEP 593 – Flexible function and variable annotations","Till Varoquaux, Konstantin Kashin","3.9"
"SF","https://peps.python.org/pep-0594/","PEP 594 – Removing dead batteries from the standard library","Christian Heimes, Brett Cannon","3.11"
"IW","https://peps.python.org/pep-0595/","PEP 595 – Improving bugs.python.org","Ezio Melotti, Berker Peksag",""
"IA","https://peps.python.org/pep-0596/","PEP 596 – Python 3.9 Release Schedule","Łukasz Langa","3.9"
"SF","https://peps.python.org/pep-0597/","PEP 597 – Add optional EncodingWarning","Inada Naoki","3.10"
"IW","https://peps.python.org/pep-0598/","PEP 598 – Introducing incremental feature releases","Alyssa Coghlan","3.9"
"IS","https://peps.python.org/pep-0599/","PEP 599 – The manylinux2014 Platform Tag","Dustin Ingram",""
"SF","https://peps.python.org/pep-0600/","PEP 600 – Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions","Nathaniel J. Smith, Thomas Kluyver",""
"SR","https://peps.python.org/pep-0601/","PEP 601 – Forbid return/break/continue breaking out of finally","Damien George, Batuhan Taskaya","3.8"
"IA","https://peps.python.org/pep-0602/","PEP 602 – Annual Release Cycle for Python","Łukasz Langa","3.9"
"S","https://peps.python.org/pep-0603/","PEP 603 – Adding a frozenmap type to collections","Yury Selivanov",""
"SA","https://peps.python.org/pep-0604/","PEP 604 – Allow writing union types as X | Y","Philippe PRADOS, Maggie Moss","3.10"
"IR","https://peps.python.org/pep-0605/","PEP 605 – A rolling feature release stream for CPython","Steve Dower, Alyssa Coghlan","3.9"
"SR","https://peps.python.org/pep-0606/","PEP 606 – Python Compatibility Version","Victor Stinner","3.9"
"IF","https://peps.python.org/pep-0607/","PEP 607 – Reducing CPython’s Feature Delivery Latency","Łukasz Langa, Steve Dower, Alyssa Coghlan","3.9"
"SR","https://peps.python.org/pep-0608/","PEP 608 – Coordinated Python release","Miro Hrončok, Victor Stinner","3.9"
"PA","https://peps.python.org/pep-0609/","PEP 609 – Python Packaging Authority (PyPA) Governance","Dustin Ingram, Pradyun Gedam, Sumana Harihareswara",""
"SF","https://peps.python.org/pep-0610/","PEP 610 – Recording the Direct URL Origin of installed distributions","Stéphane Bidoul, Chris Jerdonek",""
"SW","https://peps.python.org/pep-0611/","PEP 611 – The one million limit","Mark Shannon",""
"SF","https://peps.python.org/pep-0612/","PEP 612 – Parameter Specification Variables","Mark Mendoza","3.10"
"SA","https://peps.python.org/pep-0613/","PEP 613 – Explicit Type Aliases","Shannon Zhu","3.10"
"SF","https://peps.python.org/pep-0614/","PEP 614 – Relaxing Grammar Restrictions On Decorators","Brandt Bucher","3.9"
"SA","https://peps.python.org/pep-0615/","PEP 615 – Support for the IANA Time Zone Database in the Standard Library","Paul Ganssle","3.9"
"SF","https://peps.python.org/pep-0616/","PEP 616 – String methods to remove prefixes and suffixes","Dennis Sweeney","3.9"
"SF","https://peps.python.org/pep-0617/","PEP 617 – New PEG parser for CPython","Guido van Rossum, Pablo Galindo, Lysandros Nikolaou","3.9"
"SF","https://peps.python.org/pep-0618/","PEP 618 – Add Optional Length-Checking To zip","Brandt Bucher","3.10"
"IA","https://peps.python.org/pep-0619/","PEP 619 – Python 3.10 Release Schedule","Pablo Galindo Salgado","3.10"
"SW","https://peps.python.org/pep-0620/","PEP 620 – Hide implementation details from the C API","Victor Stinner","3.12"
"SF","https://peps.python.org/pep-0621/","PEP 621 – Storing project metadata in pyproject.toml","Brett Cannon, Dustin Ingram, Paul Ganssle, Pradyun Gedam, Sébastien Eustace, Thomas Kluyver, Tzu-ping Chung",""
"SS","https://peps.python.org/pep-0622/","PEP 622 – Structural Pattern Matching","Brandt Bucher, Daniel F Moisset, Tobias Kohn, Ivan Levkivskyi, Guido van Rossum, Talin","3.10"
"SF","https://peps.python.org/pep-0623/","PEP 623 – Remove wstr from Unicode","Inada Naoki","3.10"
"SF","https://peps.python.org/pep-0624/","PEP 624 – Remove Py_UNICODE encoder APIs","Inada Naoki","3.11"
"SA","https://peps.python.org/pep-0625/","PEP 625 – Filename of a Source Distribution","Tzu-ping Chung, Paul Moore",""
"SF","https://peps.python.org/pep-0626/","PEP 626 – Precise line numbers for debugging and other tools.","Mark Shannon","3.10"
"SF","https://peps.python.org/pep-0627/","PEP 627 – Recording installed projects","Petr Viktorin",""
"SF","https://peps.python.org/pep-0628/","PEP 628 – Add math.tau","Alyssa Coghlan","3.6"
"SF","https://peps.python.org/pep-0629/","PEP 629 – Versioning PyPI’s Simple API","Donald Stufft",""
"IF","https://peps.python.org/pep-0630/","PEP 630 – Isolating Extension Modules","Petr Viktorin",""
"SS","https://peps.python.org/pep-0631/","PEP 631 – Dependency specification in pyproject.toml based on PEP 508","Ofek Lev",""
"SF","https://peps.python.org/pep-0632/","PEP 632 – Deprecate distutils module","Steve Dower","3.10"
"SR","https://peps.python.org/pep-0633/","PEP 633 – Dependency specification in pyproject.toml using an exploded TOML table","Laurie Opperman, Arun Babu Neelicattu",""
"SF","https://peps.python.org/pep-0634/","PEP 634 – Structural Pattern Matching: Specification","Brandt Bucher, Guido van Rossum","3.10"
"IF","https://peps.python.org/pep-0635/","PEP 635 – Structural Pattern Matching: Motivation and Rationale","Tobias Kohn, Guido van Rossum","3.10"
"IF","https://peps.python.org/pep-0636/","PEP 636 – Structural Pattern Matching: Tutorial","Daniel F Moisset","3.10"
"SR","https://peps.python.org/pep-0637/","PEP 637 – Support for indexing with keyword arguments","Stefano Borini","3.10"
"S","https://peps.python.org/pep-0638/","PEP 638 – Syntactic Macros","Mark Shannon",""
"S","https://peps.python.org/pep-0639/","PEP 639 – Improving License Clarity with Better Package Metadata","Philippe Ombredanne, C.A.M. Gerlach",""
"SR","https://peps.python.org/pep-0640/","PEP 640 – Unused variable syntax","Thomas Wouters","3.10"
"SR","https://peps.python.org/pep-0641/","PEP 641 – Using an underscore in the version portion of Python 3.10 compatibility tags","Brett Cannon, Steve Dower, Barry Warsaw","3.10"
"SR","https://peps.python.org/pep-0642/","PEP 642 – Explicit Pattern Syntax for Structural Pattern Matching","Alyssa Coghlan","3.10"
"SF","https://peps.python.org/pep-0643/","PEP 643 – Metadata for Package Source Distributions","Paul Moore",""
"SF","https://peps.python.org/pep-0644/","PEP 644 – Require OpenSSL 1.1.1 or newer","Christian Heimes","3.10"
"SW","https://peps.python.org/pep-0645/","PEP 645 – Allow writing optional types as x?","Maggie Moss",""
"SA","https://peps.python.org/pep-0646/","PEP 646 – Variadic Generics","Mark Mendoza, Matthew Rahtz, Pradeep Kumar Srinivasan, Vincent Siles","3.11"
"SA","https://peps.python.org/pep-0647/","PEP 647 – User-Defined Type Guards","Eric Traut","3.10"
"SR","https://peps.python.org/pep-0648/","PEP 648 – Extensible customizations of the interpreter at startup","Mario Corchero","3.11"
"SA","https://peps.python.org/pep-0649/","PEP 649 – Deferred Evaluation Of Annotations Using Descriptors","Larry Hastings","3.13"
"SW","https://peps.python.org/pep-0650/","PEP 650 – Specifying Installer Requirements for Python Projects","Vikram Jayanthi, Dustin Ingram, Brett Cannon",""
"SR","https://peps.python.org/pep-0651/","PEP 651 – Robust Stack Overflow Handling","Mark Shannon",""
"SF","https://peps.python.org/pep-0652/","PEP 652 – Maintaining the Stable ABI","Petr Viktorin","3.10"
"S","https://peps.python.org/pep-0653/","PEP 653 – Precise Semantics for Pattern Matching","Mark Shannon",""
"SF","https://peps.python.org/pep-0654/","PEP 654 – Exception Groups and except*","Irit Katriel, Yury Selivanov, Guido van Rossum","3.11"
"SA","https://peps.python.org/pep-0655/","PEP 655 – Marking individual TypedDict items as required or potentially-missing","David Foster","3.11"
"SF","https://peps.python.org/pep-0656/","PEP 656 – Platform Tag for Linux Distributions Using Musl","Tzu-ping Chung",""
"SF","https://peps.python.org/pep-0657/","PEP 657 – Include Fine Grained Error Locations in Tracebacks","Pablo Galindo, Batuhan Taskaya, Ammar Askar","3.11"
"SA","https://peps.python.org/pep-0658/","PEP 658 – Serve Distribution Metadata in the Simple Repository API","Tzu-ping Chung",""
"I","https://peps.python.org/pep-0659/","PEP 659 – Specializing Adaptive Interpreter","Mark Shannon",""
"SF","https://peps.python.org/pep-0660/","PEP 660 – Editable installs for pyproject.toml based builds (wheel based)","Daniel Holth, Stéphane Bidoul",""
"S","https://peps.python.org/pep-0661/","PEP 661 – Sentinel Values","Tal Einat",""
"SR","https://peps.python.org/pep-0662/","PEP 662 – Editable installs via virtual wheels","Bernát Gábor",""
"IR","https://peps.python.org/pep-0663/","PEP 663 – Standardizing Enum str(), repr(), and format() behaviors","Ethan Furman","3.11"
"IA","https://peps.python.org/pep-0664/","PEP 664 – Python 3.11 Release Schedule","Pablo Galindo Salgado","3.11"
"SR","https://peps.python.org/pep-0665/","PEP 665 – A file format to list Python dependencies for reproducibility of an application","Brett Cannon, Pradyun Gedam, Tzu-ping Chung",""
"SR","https://peps.python.org/pep-0666/","PEP 666 – Reject Foolish Indentation","Laura Creighton","2.2"
"S","https://peps.python.org/pep-0667/","PEP 667 – Consistent views of namespaces","Mark Shannon","3.13"
"SA","https://peps.python.org/pep-0668/","PEP 668 – Marking Python base environments as “externally managed”","Geoffrey Thomas, Matthias Klose, Filipe Laíns, Donald Stufft, Tzu-ping Chung, Stefano Rivera, Elana Hashman, Pradyun Gedam",""
"SA","https://peps.python.org/pep-0669/","PEP 669 – Low Impact Monitoring for CPython","Mark Shannon","3.12"
"SF","https://peps.python.org/pep-0670/","PEP 670 – Convert macros to functions in the Python C API","Erlend Egeberg Aasland, Victor Stinner","3.11"
"S","https://peps.python.org/pep-0671/","PEP 671 – Syntax for late-bound function argument defaults","Chris Angelico","3.12"
"IA","https://peps.python.org/pep-0672/","PEP 672 – Unicode-related Security Considerations for Python","Petr Viktorin",""
"SA","https://peps.python.org/pep-0673/","PEP 673 – Self Type","Pradeep Kumar Srinivasan, James Hilton-Balfe","3.11"
"SD","https://peps.python.org/pep-0674/","PEP 674 – Disallow using macros as l-values","Victor Stinner","3.12"
"SA","https://peps.python.org/pep-0675/","PEP 675 – Arbitrary Literal String Type","Pradeep Kumar Srinivasan, Graham Bleaney","3.11"
"PA","https://peps.python.org/pep-0676/","PEP 676 – PEP Infrastructure Process","Adam Turner",""
"SR","https://peps.python.org/pep-0677/","PEP 677 – Callable Type Syntax","Steven Troxler, Pradeep Kumar Srinivasan","3.11"
"SF","https://peps.python.org/pep-0678/","PEP 678 – Enriching Exceptions with Notes","Zac Hatfield-Dodds","3.11"
"S","https://peps.python.org/pep-0679/","PEP 679 – Allow parentheses in assert statements","Pablo Galindo Salgado","3.12"
"SF","https://peps.python.org/pep-0680/","PEP 680 – tomllib: Support for Parsing TOML in the Standard Library","Taneli Hukkinen, Shantanu Jain","3.11"
"SA","https://peps.python.org/pep-0681/","PEP 681 – Data Class Transforms","Erik De Bonte, Eric Traut","3.11"
"SF","https://peps.python.org/pep-0682/","PEP 682 – Format Specifier for Signed Zero","John Belmonte","3.11"
"SA","https://peps.python.org/pep-0683/","PEP 683 – Immortal Objects, Using a Fixed Refcount","Eric Snow, Eddie Elizondo","3.12"
"SA","https://peps.python.org/pep-0684/","PEP 684 – A Per-Interpreter GIL","Eric Snow","3.12"
"SA","https://peps.python.org/pep-0685/","PEP 685 – Comparison of extra names for optional distribution dependencies","Brett Cannon",""
"SA","https://peps.python.org/pep-0686/","PEP 686 – Make UTF-8 mode default","Inada Naoki","3.15"
"SA","https://peps.python.org/pep-0687/","PEP 687 – Isolating modules in the standard library","Erlend Egeberg Aasland, Petr Viktorin","3.12"
"SA","https://peps.python.org/pep-0688/","PEP 688 – Making the buffer protocol accessible in Python","Jelle Zijlstra","3.12"
"SF","https://peps.python.org/pep-0689/","PEP 689 – Unstable C API tier","Petr Viktorin","3.12"
"SR","https://peps.python.org/pep-0690/","PEP 690 – Lazy Imports","Germán Méndez Bravo, Carl Meyer","3.12"
"SA","https://peps.python.org/pep-0691/","PEP 691 – JSON-based Simple API for Python Package Indexes","Donald Stufft, Pradyun Gedam, Cooper Lees, Dustin Ingram",""
"SA","https://peps.python.org/pep-0692/","PEP 692 – Using TypedDict for more precise **kwargs typing","Franek Magiera","3.12"
"IA","https://peps.python.org/pep-0693/","PEP 693 – Python 3.12 Release Schedule","Thomas Wouters","3.12"
"S","https://peps.python.org/pep-0694/","PEP 694 – Upload 2.0 API for Python Package Repositories","Donald Stufft",""
"SA","https://peps.python.org/pep-0695/","PEP 695 – Type Parameter Syntax","Eric Traut","3.12"
"S","https://peps.python.org/pep-0696/","PEP 696 – Type Defaults for Type Parameters","James Hilton-Balfe","3.12"
"SF","https://peps.python.org/pep-0697/","PEP 697 – Limited C API for Extending Opaque Types","Petr Viktorin","3.12"
"SA","https://peps.python.org/pep-0698/","PEP 698 – Override Decorator for Static Typing","Steven Troxler, Joshua Xu, Shannon Zhu","3.12"
"SA","https://peps.python.org/pep-0699/","PEP 699 – Remove private dict version field added in PEP 509","Ken Jin","3.12"
"SA","https://peps.python.org/pep-0700/","PEP 700 – Additional Fields for the Simple API for Package Indexes","Paul Moore",""
"SA","https://peps.python.org/pep-0701/","PEP 701 – Syntactic formalization of f-strings","Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Marta Gómez Macías","3.12"
"SA","https://peps.python.org/pep-0702/","PEP 702 – Marking deprecations using the type system","Jelle Zijlstra","3.13"
"SA","https://peps.python.org/pep-0703/","PEP 703 – Making the Global Interpreter Lock Optional in CPython","Sam Gross","3.13"
"SW","https://peps.python.org/pep-0704/","PEP 704 – Require virtual environments by default for package installers","Pradyun Gedam",""
"S","https://peps.python.org/pep-0705/","PEP 705 – TypedDict: Read-only items","Alice Purcell","3.13"
"SF","https://peps.python.org/pep-0706/","PEP 706 – Filter for tarfile.extractall","Petr Viktorin","3.12"
"SR","https://peps.python.org/pep-0707/","PEP 707 – A simplified signature for __exit__ and __aexit__","Irit Katriel","3.12"
"SP","https://peps.python.org/pep-0708/","PEP 708 – Extending the Repository API to Mitigate Dependency Confusion Attacks","Donald Stufft",""
"SF","https://peps.python.org/pep-0709/","PEP 709 – Inlined comprehensions","Carl Meyer","3.12"
"S","https://peps.python.org/pep-0710/","PEP 710 – Recording the provenance of installed packages","Fridolín Pokorný",""
"S","https://peps.python.org/pep-0711/","PEP 711 – PyBI: a standard format for distributing Python Binaries","Nathaniel J. Smith",""
"S","https://peps.python.org/pep-0712/","PEP 712 – Adding a “converter” parameter to dataclasses.field","Joshua Cannon","3.13"
"SR","https://peps.python.org/pep-0713/","PEP 713 – Callable Modules","Amethyst Reese","3.12"
"SA","https://peps.python.org/pep-0714/","PEP 714 – Rename dist-info-metadata in the Simple API","Donald Stufft",""
"SF","https://peps.python.org/pep-0715/","PEP 715 – Disabling bdist_egg distribution uploads on PyPI","William Woodruff",""
"S","https://peps.python.org/pep-0718/","PEP 718 – Subscriptable functions","James Hilton-Balfe","3.13"
"IA","https://peps.python.org/pep-0719/","PEP 719 – Python 3.13 Release Schedule","Thomas Wouters","3.13"
"I","https://peps.python.org/pep-0720/","PEP 720 – Cross-compiling Python packages","Filipe Laíns","3.12"
"SF","https://peps.python.org/pep-0721/","PEP 721 – Using tarfile.data_filter for source distribution extraction","Petr Viktorin","3.12"
"SR","https://peps.python.org/pep-0722/","PEP 722 – Dependency specification for single-file scripts","Paul Moore",""
"SA","https://peps.python.org/pep-0723/","PEP 723 – Inline script metadata","Ofek Lev",""
"S","https://peps.python.org/pep-0724/","PEP 724 – Stricter Type Guards","Rich Chiodo, Eric Traut, Erik De Bonte","3.13"
"S","https://peps.python.org/pep-0725/","PEP 725 – Specifying external dependencies in pyproject.toml","Pradyun Gedam, Ralf Gommers",""
"S","https://peps.python.org/pep-0726/","PEP 726 – Module __setattr__ and __delattr__","Sergey B Kirpichev","3.13"
"S","https://peps.python.org/pep-0727/","PEP 727 – Documentation in Annotated Metadata","Sebastián Ramírez","3.13"
"PA","https://peps.python.org/pep-0729/","PEP 729 – Typing governance process","Jelle Zijlstra, Shantanu Jain",""
"S","https://peps.python.org/pep-0730/","PEP 730 – Adding iOS as a supported platform","Russell Keith-Magee","3.13"
"PA","https://peps.python.org/pep-0731/","PEP 731 – C API Working Group Charter","Guido van Rossum, Petr Viktorin, Victor Stinner, Steve Dower, Irit Katriel",""
"PA","https://peps.python.org/pep-0732/","PEP 732 – The Python Documentation Editorial Board","Joanna Jablonski",""
"I","https://peps.python.org/pep-0733/","PEP 733 – An Evaluation of Python’s Public C API","Erlend Egeberg Aasland, Domenico Andreoli, Stefan Behnel, Carl Friedrich Bolz-Tereick, Simon Cross, Steve Dower, Tim Felgentreff, David Hewitt, Shantanu Jain, Wenzel Jakob, Irit Katriel, Marc-Andre Lemburg, Donghee Na, Karl Nelson, Ronald Oussoren, Antoine Pitrou, Neil Schemenauer, Mark Shannon, Stepan Sindelar, Gregory P. Smith, Eric Snow, Victor Stinner, Guido van Rossum, Petr Viktorin, Carol Willing, William Woodruff, David Woods, Jelle Zijlstra",""
"S","https://peps.python.org/pep-0734/","PEP 734 – Multiple Interpreters in the Stdlib","Eric Snow","3.13"
"S","https://peps.python.org/pep-0735/","PEP 735 – Dependency Groups in pyproject.toml","Stephen Rosen",""
"S","https://peps.python.org/pep-0736/","PEP 736 – Shorthand syntax for keyword arguments at invocation","Joshua Bambrick, Chris Angelico","3.13"
"S","https://peps.python.org/pep-0737/","PEP 737 – Unify type name formatting","Victor Stinner","3.13"
"S","https://peps.python.org/pep-0738/","PEP 738 – Adding Android as a supported platform","Malcolm Smith","3.13"
"S","https://peps.python.org/pep-0739/","PEP 739 – Static description file for Python installations","Filipe Laíns","3.13"
"I","https://peps.python.org/pep-0740/","PEP 740 – Index support for digital attestations","William Woodruff, Facundo Tuesca",""
"S","https://peps.python.org/pep-0741/","PEP 741 – Python Configuration C API","Victor Stinner","3.13"
"SR","https://peps.python.org/pep-0754/","PEP 754 – IEEE 754 Floating Point Special Values","Gregory R. Warnes","2.3"
"IA","https://peps.python.org/pep-0801/","PEP 801 – Reserved","Barry Warsaw",""
"PF","https://peps.python.org/pep-3000/","PEP 3000 – Python 3000","Guido van Rossum",""
"PW","https://peps.python.org/pep-3001/","PEP 3001 – Procedure for reviewing and improving standard library modules","Georg Brandl",""
"PF","https://peps.python.org/pep-3002/","PEP 3002 – Procedure for Backwards-Incompatible Changes","Steven Bethard",""
"PF","https://peps.python.org/pep-3003/","PEP 3003 – Python Language Moratorium","Brett Cannon, Jesse Noller, Guido van Rossum",""
"PF","https://peps.python.org/pep-3099/","PEP 3099 – Things that will Not Change in Python 3000","Georg Brandl",""
"PF","https://peps.python.org/pep-3100/","PEP 3100 – Miscellaneous Python 3.0 Plans","Brett Cannon",""
"SF","https://peps.python.org/pep-3101/","PEP 3101 – Advanced String Formatting","Talin","3.0"
"SF","https://peps.python.org/pep-3102/","PEP 3102 – Keyword-Only Arguments","Talin","3.0"
"SR","https://peps.python.org/pep-3103/","PEP 3103 – A Switch/Case Statement","Guido van Rossum","3.0"
"SF","https://peps.python.org/pep-3104/","PEP 3104 – Access to Names in Outer Scopes","Ka-Ping Yee","3.0"
"SF","https://peps.python.org/pep-3105/","PEP 3105 – Make print a function","Georg Brandl","3.0"
"SF","https://peps.python.org/pep-3106/","PEP 3106 – Revamping dict.keys(), .values() and .items()","Guido van Rossum","3.0"
"SF","https://peps.python.org/pep-3107/","PEP 3107 – Function Annotations","Collin Winter, Tony Lownds","3.0"
"SF","https://peps.python.org/pep-3108/","PEP 3108 – Standard Library Reorganization","Brett Cannon","3.0"
"SF","https://peps.python.org/pep-3109/","PEP 3109 – Raising Exceptions in Python 3000","Collin Winter","3.0"
"SF","https://peps.python.org/pep-3110/","PEP 3110 – Catching Exceptions in Python 3000","Collin Winter","3.0"
"SF","https://peps.python.org/pep-3111/","PEP 3111 – Simple input built-in in Python 3000","Andre Roberge","3.0"
"SF","https://peps.python.org/pep-3112/","PEP 3112 – Bytes literals in Python 3000","Jason Orendorff","3.0"
"SF","https://peps.python.org/pep-3113/","PEP 3113 – Removal of Tuple Parameter Unpacking","Brett Cannon","3.0"
"SF","https://peps.python.org/pep-3114/","PEP 3114 – Renaming iterator.next() to iterator.__next__()","Ka-Ping Yee","3.0"
"SF","https://peps.python.org/pep-3115/","PEP 3115 – Metaclasses in Python 3000","Talin","3.0"
"SF","https://peps.python.org/pep-3116/","PEP 3116 – New I/O","Daniel Stutzbach, Guido van Rossum, Mike Verdone","3.0"
"SR","https://peps.python.org/pep-3117/","PEP 3117 – Postfix type declarations","Georg Brandl","3.0"
"SF","https://peps.python.org/pep-3118/","PEP 3118 – Revising the buffer protocol","Travis Oliphant, Carl Banks","3.0"
"SF","https://peps.python.org/pep-3119/","PEP 3119 – Introducing Abstract Base Classes","Guido van Rossum, Talin","3.0"
"SF","https://peps.python.org/pep-3120/","PEP 3120 – Using UTF-8 as the default source encoding","Martin von Löwis","3.0"
"SF","https://peps.python.org/pep-3121/","PEP 3121 – Extension Module Initialization and Finalization","Martin von Löwis","3.0"
"SR","https://peps.python.org/pep-3122/","PEP 3122 – Delineation of the main module","Brett Cannon",""
"SF","https://peps.python.org/pep-3123/","PEP 3123 – Making PyObject_HEAD conform to standard C","Martin von Löwis","3.0"
"SD","https://peps.python.org/pep-3124/","PEP 3124 – Overloading, Generic Functions, Interfaces, and Adaptation","Phillip J. Eby",""
"SR","https://peps.python.org/pep-3125/","PEP 3125 – Remove Backslash Continuation","Jim J. Jewett",""
"SR","https://peps.python.org/pep-3126/","PEP 3126 – Remove Implicit String Concatenation","Jim J. Jewett, Raymond Hettinger",""
"SF","https://peps.python.org/pep-3127/","PEP 3127 – Integer Literal Support and Syntax","Patrick Maupin","3.0"
"SR","https://peps.python.org/pep-3128/","PEP 3128 – BList: A Faster List-like Type","Daniel Stutzbach","2.6, 3.0"
"SF","https://peps.python.org/pep-3129/","PEP 3129 – Class Decorators","Collin Winter","3.0"
"SR","https://peps.python.org/pep-3130/","PEP 3130 – Access to Current Module/Class/Function","Jim J. Jewett","3.0"
"SF","https://peps.python.org/pep-3131/","PEP 3131 – Supporting Non-ASCII Identifiers","Martin von Löwis","3.0"
"SF","https://peps.python.org/pep-3132/","PEP 3132 – Extended Iterable Unpacking","Georg Brandl","3.0"
"SR","https://peps.python.org/pep-3133/","PEP 3133 – Introducing Roles","Collin Winter","3.0"
"SF","https://peps.python.org/pep-3134/","PEP 3134 – Exception Chaining and Embedded Tracebacks","Ka-Ping Yee","3.0"
"SF","https://peps.python.org/pep-3135/","PEP 3135 – New Super","Calvin Spealman, Tim Delaney, Lie Ryan","3.0"
"SR","https://peps.python.org/pep-3136/","PEP 3136 – Labeled break and continue","Matt Chisholm","3.1"
"SF","https://peps.python.org/pep-3137/","PEP 3137 – Immutable Bytes and Mutable Buffer","Guido van Rossum","3.0"
"SF","https://peps.python.org/pep-3138/","PEP 3138 – String representation in Python 3000","Atsuo Ishimoto","3.0"
"SR","https://peps.python.org/pep-3139/","PEP 3139 – Cleaning out sys and the “interpreter” module","Benjamin Peterson","3.0"
"SR","https://peps.python.org/pep-3140/","PEP 3140 – str(container) should call str(item), not repr(item)","Oleg Broytman, Jim J. Jewett",""
"SF","https://peps.python.org/pep-3141/","PEP 3141 – A Type Hierarchy for Numbers","Jeffrey Yasskin","3.0"
"SR","https://peps.python.org/pep-3142/","PEP 3142 – Add a “while” clause to generator expressions","Gerald Britton","3.0"
"SD","https://peps.python.org/pep-3143/","PEP 3143 – Standard daemon process library","Ben Finney","3.x"
"SF","https://peps.python.org/pep-3144/","PEP 3144 – IP Address Manipulation Library for the Python Standard Library","Peter Moody","3.3"
"SW","https://peps.python.org/pep-3145/","PEP 3145 – Asynchronous I/O For subprocess.Popen","Eric Pruitt, Charles R. McCreary, Josiah Carlson","3.2"
"SW","https://peps.python.org/pep-3146/","PEP 3146 – Merging Unladen Swallow into CPython","Collin Winter, Jeffrey Yasskin, Reid Kleckner","3.3"
"SF","https://peps.python.org/pep-3147/","PEP 3147 – PYC Repository Directories","Barry Warsaw","3.2"
"SF","https://peps.python.org/pep-3148/","PEP 3148 – futures - execute computations asynchronously","Brian Quinlan","3.2"
"SF","https://peps.python.org/pep-3149/","PEP 3149 – ABI version tagged .so files","Barry Warsaw","3.2"
"SD","https://peps.python.org/pep-3150/","PEP 3150 – Statement local namespaces (aka “given” clause)","Alyssa Coghlan","3.4"
"SF","https://peps.python.org/pep-3151/","PEP 3151 – Reworking the OS and IO exception hierarchy","Antoine Pitrou","3.3"
"SR","https://peps.python.org/pep-3152/","PEP 3152 – Cofunctions","Gregory Ewing","3.3"
"SS","https://peps.python.org/pep-3153/","PEP 3153 – Asynchronous IO support","Laurens Van Houtven",""
"SF","https://peps.python.org/pep-3154/","PEP 3154 – Pickle protocol version 4","Antoine Pitrou","3.4"
"SF","https://peps.python.org/pep-3155/","PEP 3155 – Qualified name for classes and functions","Antoine Pitrou","3.3"
"SF","https://peps.python.org/pep-3156/","PEP 3156 – Asynchronous IO Support Rebooted: the “asyncio” Module","Guido van Rossum","3.3"
"IF","https://peps.python.org/pep-3333/","PEP 3333 – Python Web Server Gateway Interface v1.0.1","Phillip J. Eby",""
"IF","https://peps.python.org/pep-8000/","PEP 8000 – Python Language Governance Proposal Overview","Barry Warsaw",""
"PF","https://peps.python.org/pep-8001/","PEP 8001 – Python Governance Voting Process","Brett Cannon, Christian Heimes, Donald Stufft, Eric Snow, Gregory P. Smith, Łukasz Langa, Mariatta, Nathaniel J. Smith, Pablo Galindo Salgado, Raymond Hettinger, Tal Einat, Tim Peters, Zachary Ware",""
"IF","https://peps.python.org/pep-8002/","PEP 8002 – Open Source Governance Survey","Barry Warsaw, Łukasz Langa, Antoine Pitrou, Doug Hellmann, Carol Willing",""
"IR","https://peps.python.org/pep-8010/","PEP 8010 – The Technical Leader Governance Model","Barry Warsaw",""
"IR","https://peps.python.org/pep-8011/","PEP 8011 – Python Governance Model Lead by Trio of Pythonistas","Mariatta, Barry Warsaw",""
"IR","https://peps.python.org/pep-8012/","PEP 8012 – The Community Governance Model","Łukasz Langa",""
"IR","https://peps.python.org/pep-8013/","PEP 8013 – The External Council Governance Model","Steve Dower",""
"IR","https://peps.python.org/pep-8014/","PEP 8014 – The Commons Governance Model","Jack Jansen",""
"IR","https://peps.python.org/pep-8015/","PEP 8015 – Organization of the Python community","Victor Stinner",""
"IA","https://peps.python.org/pep-8016/","PEP 8016 – The Steering Council Model","Nathaniel J. Smith, Donald Stufft",""
"IF","https://peps.python.org/pep-8100/","PEP 8100 – January 2019 Steering Council election","Nathaniel J. Smith, Ee Durbin",""
"IF","https://peps.python.org/pep-8101/","PEP 8101 – 2020 Term Steering Council election","Ewa Jodlowska, Ee Durbin",""
"IF","https://peps.python.org/pep-8102/","PEP 8102 – 2021 Term Steering Council election","Ewa Jodlowska, Ee Durbin, Joe Carey",""
"IF","https://peps.python.org/pep-8103/","PEP 8103 – 2022 Term Steering Council election","Ewa Jodlowska, Ee Durbin, Joe Carey",""
"IA","https://peps.python.org/pep-8104/","PEP 8104 – 2023 Term Steering Council election","Ee Durbin",""
"IA","https://peps.python.org/pep-8105/","PEP 8105 – 2024 Term Steering Council election","Ee Durbin",""
